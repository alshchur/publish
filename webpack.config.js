const fs = require('fs')
const MiniCssExtractPlugin = require('mini-css-extract-plugin')
const path = require('path')
const WebpackPreBuildPlugin = require('pre-build-webpack')

const PATHS = {
  COMPONENTS: './app/components',
  FIELD_COMPONENT_LIST: './app/lib/field-components.js'
}

module.exports = {
  entry: './app/index.js',
  module: {
    rules: [
      {
        test: /\.(js|jsx)$/,
        exclude: /node_modules/,
        use: ['babel-loader']
      },
      {
        test: /\.(png|woff|woff2|eot|ttf|svg)(\?.*$|$)/,
        use: {
          loader: 'url-loader'
        }
      },
      {
        test: /\.css$/,
        use: [
          MiniCssExtractPlugin.loader,
          {
            loader: 'css-loader',
            options: {
              modules: true,
              localIdentName: '[name]__[local]___[hash:base64:5]'
            }
          },
          {
            loader: 'postcss-loader',
            options: {
              plugins: function() {
                return [require('autoprefixer')]
              }
            }
          }
        ]
      }
    ]
  },
  output: {
    path: __dirname + '/dist',
    publicPath: '/',
    filename: 'bundle.js'
  },
  plugins: [
    new MiniCssExtractPlugin({
      chunkFilename: '[id].css',
      filename: '[name].css'
    }),

    // Build JS file with field components.
    new WebpackPreBuildPlugin(() => {
      const components = fs.readdirSync(PATHS.COMPONENTS).filter(item => {
        return item.indexOf('Field') === 0
      })

      let componentsFile =
        '/* eslint-disable */\n/* Generated by Webpack. Do not change or commit! */\n'

      componentsFile += components
        .map(component => {
          const componentPath = path.resolve(
            __dirname,
            PATHS.COMPONENTS,
            component,
            component
          )

          return `import * as ${component} from '${componentPath}'`
        })
        .join('\n')

      componentsFile += `\n\nexport {${components.join(', ')}}`

      fs.writeFileSync(PATHS.FIELD_COMPONENT_LIST, componentsFile)
    })
  ],
  resolve: {
    alias: {
      actions: path.resolve(__dirname, 'app/actions'),
      components: path.resolve(__dirname, 'app/components'),
      containers: path.resolve(__dirname, 'app/containers'),
      lib: path.resolve(__dirname, 'app/lib'),
      reducers: path.resolve(__dirname, 'app/reducers'),
      shared: path.resolve(__dirname, 'shared'),
      views: path.resolve(__dirname, 'app/views')
    },
    extensions: ['*', '.js', '.jsx']
  }
}
